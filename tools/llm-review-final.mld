---
description: LLM-powered PR review for mlld registry modules using env vars
author: mlld-registry
version: 2.0.0
---

# ðŸ¤– Autonomous Module Registry Review System
# Using mlld to review mlld modules - self-governance achieved!

# Import environment variables directly
@import { PR_NUMBER, REPO_OWNER, REPO_NAME, PR_TITLE, PR_AUTHOR, ANTHROPIC_API_KEY } from @input

# Fetch PR details using GitHub CLI
@exec get_pr_data = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER]
@exec get_pr_diff = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER --jq '.diff_url' | xargs curl -s]
@exec get_pr_files = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER/files --jq '.[] | {filename: .filename, status: .status, additions: .additions, deletions: .deletions}']

# Execute to get PR data
@run @get_pr_data()
@text pr_diff = [[Diff data would go here - exec output capture pending]]
@text pr_files = [[Files data would go here - exec output capture pending]]

# Create comprehensive review prompt
@text review_prompt = [[
You are an expert code reviewer for the mlld PUBLIC module registry. Your job is to review pull requests that add new modules to ensure they:

1. **Add genuine value** to the mlld ecosystem
2. **Follow security best practices** (no secrets, safe commands)  
3. **Have proper module structure** and metadata
4. **Use appropriate naming** and descriptions
5. **Don't duplicate existing functionality** without good reason
6. **Are actually useful** vs just demo/test modules

## PR Information:
- **Title**: {{PR_TITLE}}
- **Author**: @{{PR_AUTHOR}}
- **PR #{{PR_NUMBER}}** in {{REPO_OWNER}}/{{REPO_NAME}}

## Changes:
{{pr_files}}

## Diff:
{{pr_diff}}

## Review Criteria:

### âœ… APPROVE if:
- Module solves a real problem or provides useful functionality
- Code is well-structured with clear frontmatter
- Module name is descriptive and follows @username/module-name format
- No obvious security issues (no hardcoded secrets, safe command execution)
- Good documentation/description of what it does
- Doesn't conflict with existing modules

### ðŸ”„ REQUEST_CHANGES if:
- Security issues (secrets, unsafe commands, suspicious URLs)
- Missing required metadata (author, module name, description)
- Malformed module structure or invalid source URLs
- Module name conflicts or doesn't follow naming conventions
- Description is unclear or missing

### ðŸ’­ COMMENT if:
- Unsure about usefulness but no obvious issues
- Quality concerns but not security issues
- Needs human judgment on value/appropriateness
- Edge cases that need discussion

## Response Format:
Provide your recommendation as one of: APPROVE, REQUEST_CHANGES, or COMMENT

Then provide detailed reasoning explaining:
- What the module does
- Why you made this decision
- Any specific concerns or highlights
- Suggestions for improvement (if any)

Be thorough but concise. Remember: this is a PUBLIC registry, so quality and security matter.
]]

# Get LLM review via Claude API
# Write prompt to file to avoid shell escaping issues
@exec call_claude(api_key, prompt) = @run [
  cat > /tmp/claude_prompt.txt << 'PROMPT_EOF'
@prompt
PROMPT_EOF
  && jq -n --rawfile prompt /tmp/claude_prompt.txt '{
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 1500,
    system: "You are a helpful code reviewer for an open source module registry. Be thorough but fair in your reviews.",
    messages: [{
      role: "user",
      content: $prompt
    }]
  }' | curl -s https://api.anthropic.com/v1/messages \
    -H "Content-Type: application/json" \
    -H "x-api-key: @api_key" \
    -H "anthropic-version: 2023-06-01" \
    -d @- | jq -r '.content[0].text'
]

# Call Claude with our review prompt
@run @call_claude(@ANTHROPIC_API_KEY, @review_prompt)

# Store the response (TODO: capture exec output when available)
@text llm_response = [[COMMENT

The @mlld/fs module appears to provide filesystem utilities for directory traversal and content output. Based on the PR information:

- Module follows proper naming convention (@mlld/fs)
- Appears to be an official mlld module from the core team
- Provides filesystem functionality which is a common need

Without seeing the actual module code and diff, I recommend COMMENT status for human review to verify:
- Security implications of filesystem operations
- Proper sandboxing and path validation
- No exposure of sensitive system information
- Quality of implementation

Manual review recommended to ensure security best practices are followed for filesystem operations.]]

# Extract recommendation and reasoning
@exec get_recommendation = @run [echo "@llm_response" | head -1 | grep -oE "(APPROVE|REQUEST_CHANGES|COMMENT)"]
@exec get_reasoning = @run [echo "@llm_response" | tail -n +2]

# Set environment variables for GitHub Actions
@run [echo "LLM_RECOMMENDATION=COMMENT" >> $GITHUB_ENV]
@run [echo "LLM_REVIEW_REASONING<<EOF" >> $GITHUB_ENV]
@run @get_reasoning()
@run [echo "EOF" >> $GITHUB_ENV]

# Log the review summary
@text review_summary = [[
ðŸ¤– **LLM Review Complete**

**PR**: #{{PR_NUMBER}} - {{PR_TITLE}}
**Author**: @{{PR_AUTHOR}}
**Repository**: {{REPO_OWNER}}/{{REPO_NAME}}

**Recommendation**: COMMENT

{{llm_response}}

---
*Self-governing mlld registry using mlld to review mlld modules!*
]]

@add @review_summary