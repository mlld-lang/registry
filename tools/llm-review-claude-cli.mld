---
description: LLM review using Claude CLI
author: mlld-registry
version: 1.0.0
---

# Import environment variables
@import { PR_NUMBER, REPO_OWNER, REPO_NAME, PR_TITLE, PR_AUTHOR, ANTHROPIC_API_KEY } from @input

# Get PR data using GitHub CLI
@text pr_data = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER]
@text pr_files = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER/files --jq '.[] | .filename' | head -20]
@text pr_diff = @run [curl -s https://github.com/@REPO_OWNER/@REPO_NAME/pull/@PR_NUMBER.diff | head -50]

# Create review prompt with all the context
@text review_prompt = [[
You are a code reviewer. Review this PR and respond with ONLY one of these three words on the first line: APPROVE, REQUEST_CHANGES, or COMMENT

Then provide your reasoning.

PR #{{PR_NUMBER}}: {{PR_TITLE}}
Author: @{{PR_AUTHOR}}
Repository: {{REPO_OWNER}}/{{REPO_NAME}}

Files changed:
{{pr_files}}

Sample diff:
{{pr_diff}}

This is for a PUBLIC module registry. Consider:
- Does it add value?
- Is it secure (no secrets, safe commands)?
- Is the module well-structured?
- Any conflicts with existing modules?

DO NOT ask for permissions or try to fetch data. Just review based on the information provided.]]

# Debug: Show that we have the API key
@run [echo "API Key present: ${ANTHROPIC_API_KEY:+yes}"]

# Use Claude CLI and capture the response!
@text llm_response = @run [ANTHROPIC_API_KEY=@ANTHROPIC_API_KEY claude --print "@review_prompt"]

# Debug: Show what we got
@run [echo "Claude response length: ${#llm_response}" | head -20]
@run [echo "First 200 chars of response: @llm_response" | head -c 200]

# Extract the recommendation from Claude's response (first line should be APPROVE/REQUEST_CHANGES/COMMENT)
@text recommendation = @run [echo "@llm_response" | head -1 | grep -oE "(APPROVE|REQUEST_CHANGES|COMMENT)" || echo "COMMENT"]

# Extract the reasoning (everything after the first line)
@text reasoning = @run [echo "@llm_response" | tail -n +2]

# Fallback if response is empty
@run [test -z "@llm_response" && echo "WARNING: Claude response was empty!" || true]

# Set GitHub Actions environment variables
@run [echo "LLM_RECOMMENDATION=@recommendation" >> $GITHUB_ENV]
@run [echo "LLM_REVIEW_REASONING<<EOF" >> $GITHUB_ENV]
@run [echo "@reasoning" >> $GITHUB_ENV]
@run [echo "EOF" >> $GITHUB_ENV]

# Log the review
@add [[ðŸ¤– **LLM Review Complete**

**Recommendation**: {{recommendation}}

{{reasoning}}]]