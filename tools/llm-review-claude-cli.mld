---
description: LLM review using Claude CLI
author: mlld-registry
version: 1.0.0
---

# Import environment variables
@import { PR_NUMBER, REPO_OWNER, REPO_NAME, PR_TITLE, PR_AUTHOR, ANTHROPIC_API_KEY } from @input

# For this test PR, we know what was added
@text pr_files = [[modules/test/registry.json]]
@text pr_diff = [[diff --git a/modules/test/registry.json b/modules/test/registry.json
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/modules/test/registry.json
@@ -0,0 +1,16 @@
+{
+  "modules": {
+    "@test/hello": {
+      "description": "A simple test module to verify LLM review",
+      "keywords": ["test", "hello", "example"],
+      "author": "test-author",
+      "mlldVersion": ">=1.0.0",
+      "source": {
+        "type": "gist",
+        "gistId": "12345",
+        "owner": "test-user",
+        "commit": "abcdef"
+      }
+    }
+  }
+}]]

# Create review prompt - simpler format
@text review_prompt = [[Please review this module addition. Start your response with exactly one of: APPROVE, REQUEST_CHANGES, or COMMENT

Module: @test/hello
Description: A simple test module to verify LLM review
Source: gist 12345 by test-user

Is this appropriate for a PUBLIC module registry?]]

# Debug: Show that we have the API key
@run [echo "API Key present: ${ANTHROPIC_API_KEY:+yes}"]

# Use Claude CLI and capture the response!
@text llm_response = @run [ANTHROPIC_API_KEY=@ANTHROPIC_API_KEY claude --print "@review_prompt"]

# Debug: Show what we got
@run [echo "Files found: @pr_files"]
@run [echo "Diff preview: @pr_diff" | head -5]
@run [echo "Claude response length: ${#llm_response}"]
@run [echo "Claude response: @llm_response" | head -10]

# Extract the recommendation from Claude's response (first line should be APPROVE/REQUEST_CHANGES/COMMENT)
@text recommendation = @run [echo "@llm_response" | head -1 | grep -oE "(APPROVE|REQUEST_CHANGES|COMMENT)" || echo "COMMENT"]

# Extract the reasoning (everything after the first line)
@text reasoning = @run [echo "@llm_response" | tail -n +2]

# Fallback if response is empty
@run [test -z "@llm_response" && echo "WARNING: Claude response was empty!" || true]

# Set GitHub Actions environment variables
@run [echo "LLM_RECOMMENDATION=@recommendation" >> $GITHUB_ENV]
@run [echo "LLM_REVIEW_REASONING<<EOF" >> $GITHUB_ENV]
@run [echo "@reasoning" >> $GITHUB_ENV]
@run [echo "EOF" >> $GITHUB_ENV]

# Log the review
@add [[ðŸ¤– **LLM Review Complete**

**Recommendation**: {{recommendation}}

{{reasoning}}]]