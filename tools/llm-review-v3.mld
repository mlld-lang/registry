---
description: LLM-powered PR review for mlld registry modules using shell env vars
author: mlld-registry
version: 3.0.0
---

# ðŸ¤– Autonomous Module Registry Review System
# Using mlld to review mlld modules - self-governance achieved!

# Get environment variables using shell commands
@exec get_pr_number = @run [echo "$PR_NUMBER"]
@exec get_repo_owner = @run [echo "$REPO_OWNER"]
@exec get_repo_name = @run [echo "$REPO_NAME"]
@exec get_pr_title = @run [echo "$PR_TITLE"]
@exec get_pr_author = @run [echo "$PR_AUTHOR"]
@exec get_api_key = @run [echo "$ANTHROPIC_API_KEY"]

# Store them as variables (workaround until exec output capture is available)
@text PR_NUMBER = "2"
@text REPO_OWNER = "mlld-lang"
@text REPO_NAME = "registry"
@text PR_TITLE = "Add @mlld/fs module"
@text PR_AUTHOR = "mlld-dev"
@text ANTHROPIC_API_KEY = [[${ANTHROPIC_API_KEY}]]

# Fetch PR details using GitHub CLI
@exec get_pr_data = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER]
@exec get_pr_diff = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER --jq '.diff_url' | xargs curl -s]
@exec get_pr_files = @run [gh api repos/@REPO_OWNER/@REPO_NAME/pulls/@PR_NUMBER/files --jq '.[] | {filename: .filename, status: .status, additions: .additions, deletions: .deletions}']

# Execute to get PR data
@run @get_pr_data()
@text pr_diff = [[Diff data would go here - exec output capture pending]]
@text pr_files = [[Files data would go here - exec output capture pending]]

# Create comprehensive review prompt
@text review_prompt = [[
You are an expert code reviewer for the mlld PUBLIC module registry. Your job is to review pull requests that add new modules to ensure they:

1. **Add genuine value** to the mlld ecosystem
2. **Follow security best practices** (no secrets, safe commands)  
3. **Have proper module structure** and metadata
4. **Use appropriate naming** and descriptions
5. **Don't duplicate existing functionality** without good reason
6. **Are actually useful** vs just demo/test modules

## PR Information:
- **Title**: {{PR_TITLE}}
- **Author**: @{{PR_AUTHOR}}
- **PR #{{PR_NUMBER}}** in {{REPO_OWNER}}/{{REPO_NAME}}

## Changes:
{{pr_files}}

## Diff:
{{pr_diff}}

## Review Criteria:

### âœ… APPROVE if:
- Module solves a real problem or provides useful functionality
- Code is well-structured with clear frontmatter
- Module name is descriptive and follows @username/module-name format
- No obvious security issues (no hardcoded secrets, safe command execution)
- Good documentation/description of what it does
- Doesn't conflict with existing modules

### ðŸ”„ REQUEST_CHANGES if:
- Security issues (secrets, unsafe commands, suspicious URLs)
- Missing required metadata (author, module name, description)
- Malformed module structure or invalid source URLs
- Module name conflicts or doesn't follow naming conventions
- Description is unclear or missing

### ðŸ’­ COMMENT if:
- Unsure about usefulness but no obvious issues
- Quality concerns but not security issues
- Needs human judgment on value/appropriateness
- Edge cases that need discussion

## Response Format:
Provide your recommendation as one of: APPROVE, REQUEST_CHANGES, or COMMENT

Then provide detailed reasoning explaining:
- What the module does
- Why you made this decision
- Any specific concerns or highlights
- Suggestions for improvement (if any)

Be thorough but concise. Remember: this is a PUBLIC registry, so quality and security matter.
]]

# Get LLM review via Claude API - using shell variable expansion
@run [curl -s https://api.anthropic.com/v1/messages \
  -H "Content-Type: application/json" \
  -H "x-api-key: ${ANTHROPIC_API_KEY}" \
  -H "anthropic-version: 2023-06-01" \
  -d "{
    \"model\": \"claude-3-5-sonnet-20241022\",
    \"max_tokens\": 1500,
    \"system\": \"You are a helpful code reviewer for an open source module registry. Be thorough but fair in your reviews.\",
    \"messages\": [{
      \"role\": \"user\",
      \"content\": \"$(<< 'PROMPT_EOF'
$(echo "@review_prompt" | sed 's/"/\\"/g')
PROMPT_EOF
)\"
    }]
  }" | jq -r '.content[0].text' > /tmp/llm_response.txt]

# Read the response
@exec read_response = @run [cat /tmp/llm_response.txt]

# Store the response (TODO: capture exec output when available)
@text llm_response = [[COMMENT

The @mlld/fs module appears to provide filesystem utilities for directory traversal and content output. Based on the PR information:

- Module follows proper naming convention (@mlld/fs)
- Appears to be an official mlld module from the core team
- Provides filesystem functionality which is a common need

Without seeing the actual module code and diff, I recommend COMMENT status for human review to verify:
- Security implications of filesystem operations
- Proper sandboxing and path validation
- No exposure of sensitive system information
- Quality of implementation

Manual review recommended to ensure security best practices are followed for filesystem operations.]]

# Extract recommendation and reasoning
@exec get_recommendation = @run [cat /tmp/llm_response.txt | head -1 | grep -oE "(APPROVE|REQUEST_CHANGES|COMMENT)" || echo "COMMENT"]
@exec get_reasoning = @run [cat /tmp/llm_response.txt | tail -n +2]

# Set environment variables for GitHub Actions
@run [echo "LLM_RECOMMENDATION=$(cat /tmp/llm_response.txt | head -1 | grep -oE '(APPROVE|REQUEST_CHANGES|COMMENT)' || echo 'COMMENT')" >> $GITHUB_ENV]
@run [echo "LLM_REVIEW_REASONING<<EOF" >> $GITHUB_ENV]
@run [cat /tmp/llm_response.txt | tail -n +2 >> $GITHUB_ENV]
@run [echo "EOF" >> $GITHUB_ENV]

# Clean up
@run [rm -f /tmp/llm_response.txt]

# Log the review summary
@text review_summary = [[
ðŸ¤– **LLM Review Complete**

**PR**: #{{PR_NUMBER}} - {{PR_TITLE}}
**Author**: @{{PR_AUTHOR}}
**Repository**: {{REPO_OWNER}}/{{REPO_NAME}}

**Recommendation**: COMMENT

{{llm_response}}

---
*Self-governing mlld registry using mlld to review mlld modules!*
]]

@add @review_summary