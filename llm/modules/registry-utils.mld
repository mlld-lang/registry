---
name: registry-utils
author: mlld-dev
description: Registry validation and parsing utilities
mlld-version: ">=1.0.0-rc"
---

# Registry Module Utilities

>> Extract module content from PR with new file structure
/exe @extractModuleFromPR(prFiles, diff) = js {
  // Add error checking for undefined inputs
  if (!prFiles) {
    return { error: "PR files data is undefined - check GitHub API response" };
  }
  
  if (!Array.isArray(prFiles)) {
    return { error: `PR files is not an array, got: ${typeof prFiles}` };
  }
  
  // Find module JSON files in the PR
  const moduleFiles = prFiles.filter(f => 
    f && f.path && 
    f.path.startsWith('modules/') && 
    f.path.endsWith('.json') &&
    f.path.split('/').length === 3  // Ensure proper structure
  );
  
  if (moduleFiles.length === 0) {
    return { error: "No module files found in PR" };
  }
  
  if (moduleFiles.length > 1) {
    return { error: "Multiple module files in single PR not allowed" };
  }
  
  const modulePath = moduleFiles[0].path;
  const pathParts = modulePath.split('/');
  const pathAuthor = pathParts[1];
  const pathModuleName = pathParts[2].replace('.json', '');
  
  // Extract content from diff
  const lines = diff.split('\n');
  const addedLines = [];
  let inFile = false;
  let collectingJson = false;
  
  for (const line of lines) {
    if (line.includes(`+++ b/${modulePath}`)) {
      inFile = true;
      continue;
    }
    
    if (inFile && line.startsWith('+') && line.includes('{')) {
      collectingJson = true;
    }
    
    if (collectingJson && line.startsWith('+')) {
      // Remove the + prefix
      addedLines.push(line.substring(1));
      
      // Check if this looks like the end of JSON
      if (line.trim() === '+}') {
        break;
      }
    }
  }
  
  // Parse the module content
  try {
    const jsonStr = addedLines.join('\n');
    const module = JSON.parse(jsonStr);
    
    // Validate path matches content
    if (module.author !== pathAuthor) {
      return { 
        error: `Author mismatch: file path has '${pathAuthor}' but content has '${module.author}'`
      };
    }
    
    if (module.name !== pathModuleName) {
      return { 
        error: `Module name mismatch: file path has '${pathModuleName}' but content has '${module.name}'`
      };
    }
    
    return module;
  } catch (e) {
    return { 
      error: "Invalid JSON in module file",
      parseError: e.message 
    };
  }
}

>> Validate a module's metadata and structure
/exe @validateModule(moduleData) = js {
  const issues = [];
  
  // Handle error case from extraction
  if (moduleData.error) {
    issues.push(`Failed to parse module: ${moduleData.error}`);
    return {
      valid: false,
      issues: issues,
      moduleData: moduleData
    };
  }
  
  // Check required fields
  const required = ['name', 'author', 'description', 'mlldVersion', 'source', 'needs'];
  const missing = required.filter(field => !moduleData[field]);
  
  if (missing.length > 0) {
    issues.push(`Missing required fields: ${missing.join(', ')}`);
  }
  
  // Validate module name format
  if (moduleData.name && !moduleData.name.match(/^[a-z0-9-]+$/)) {
    issues.push('Module name must contain only lowercase letters, numbers, and hyphens');
  }
  
  // Validate needs field
  if (moduleData.needs) {
    if (!Array.isArray(moduleData.needs)) {
      issues.push('Field "needs" must be an array');
    } else {
      // Validate needs values
      const validNeeds = ['js', 'py', 'sh'];
      const invalid = moduleData.needs.filter(n => !validNeeds.includes(n));
      if (invalid.length > 0) {
        issues.push(`Invalid needs values: ${invalid.join(', ')} (valid: js, py, sh)`);
      }
      
      // Check consistency with detailed dependencies
      if (moduleData.needs.includes('js') && moduleData.dependencies && !moduleData.dependencies.js) {
        issues.push('Module declares "js" in needs but missing dependencies.js details');
      }
      if (moduleData.needs.includes('py') && moduleData.dependencies && !moduleData.dependencies.py) {
        issues.push('Module declares "py" in needs but missing dependencies.py details');
      }
      if (moduleData.needs.includes('sh') && moduleData.dependencies && !moduleData.dependencies.sh) {
        issues.push('Module declares "sh" in needs but missing dependencies.sh details');
      }
    }
  }
  
  // Validate source
  if (moduleData.source) {
    if (!moduleData.source.url && !moduleData.source.gist) {
      issues.push('Source must specify either "url" or "gist"');
    }
    
    if (moduleData.source.gist) {
      if (!moduleData.source.gist.id) {
        issues.push('Gist source must include "id"');
      }
      if (!moduleData.source.gist.commit) {
        issues.push('Gist source must include "commit" hash for immutability');
      }
    }
    
    if (moduleData.source.url) {
      // Check for version pinning
      const url = moduleData.source.url;
      const hasVersion = url.includes('@') || 
                        url.includes('/releases/') || 
                        url.includes('/tag/') ||
                        url.includes('/commit/');
      
      if (!hasVersion) {
        issues.push('GitHub URLs should be pinned to a specific version, tag, or commit');
      }
    }
  }
  
  // Check for suspicious patterns
  if (JSON.stringify(moduleData).includes('eval(') || 
      JSON.stringify(moduleData).includes('Function(')) {
    issues.push('Module contains potentially dangerous code patterns');
  }
  
  return {
    valid: issues.length === 0,
    issues: issues,
    checkedFields: required.length,
    moduleData: moduleData
  };
}

>> Extract author and module name from path
/exe @parseModulePath(path) = js {
  // Expected format: modules/author/module-name.json
  const parts = path.split('/');
  if (parts.length === 3 && parts[0] === 'modules') {
    const filename = parts[2];
    const moduleName = filename.replace('.json', '');
    return {
      author: parts[1],
      moduleName: moduleName,
      filename: filename
    };
  }
  return null;
}

