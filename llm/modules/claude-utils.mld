---
name: claude-utils
author: mlld-dev
description: Claude API utilities with retry and error handling
mlld-version: ">=1.0.0-rc"
---

# Claude API Utilities

>> Query Claude API with automatic retry
/exe @queryClaudeAPI(prompt, maxRetries) = js {
  const apiKey = process.env.ANTHROPIC_API_KEY || process.env.MLLD_ANTHROPIC_API_KEY;
  if (!apiKey) {
    return "ERROR: Anthropic API key not found in environment variables";
  }

  let attempts = 0;
  while (attempts < maxRetries) {
    try {
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-5-haiku-20241022',
          max_tokens: 1024,
          messages: [{
            role: 'user',
            content: prompt
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      return data.content[0].text;
    } catch (error) {
      attempts++;
      if (attempts < maxRetries) {
        // Exponential backoff
        await new Promise(resolve => setTimeout(resolve, attempts * 2000));
      } else {
        return `ERROR: Claude request failed after ${maxRetries} attempts: ${error.message}`;
      }
    }
  }
}

>> Parse Claude's review response
/exe @parseReviewResponse(response) = js {
  // Handle error cases
  if (!response || response.startsWith("ERROR:")) {
    return {
      recommendation: "COMMENT",
      category: "utilities", // default fallback
      reasoning: "Failed to get AI review. Please have a human review this submission.",
      error: response
    };
  }
  
  // Parse the response
  const lines = response.split('\n');
  const firstLine = lines[0].trim().toUpperCase();
  
  // Extract recommendation from first line
  const validResponses = ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'];
  let recommendation = 'COMMENT'; // default
  
  for (const valid of validResponses) {
    if (firstLine.includes(valid)) {
      recommendation = valid;
      break;
    }
  }
  
  // Extract category from second line
  const validCategories = [
    'prompts', 'utilities', 'when', 'filters', 'formatters', 
    'commands', 'apis', 'clis', 'templates', 'integrations', 'generators',
    'validators', 'transformers', 'workflows', 'dev', 'tests', 
    'context'
  ];
  
  let category = 'utilities'; // default fallback
  const secondLine = lines[1]?.trim() || '';
  const categoryMatch = secondLine.match(/CATEGORY:\s*([a-z]+)/i);
  
  if (categoryMatch) {
    const extractedCategory = categoryMatch[1].toLowerCase();
    if (validCategories.includes(extractedCategory)) {
      category = extractedCategory;
    }
  }
  
  // Everything after first two lines is reasoning
  const reasoning = lines.slice(2).join('\n').trim() || 
                   'No detailed reasoning provided.';
  
  return {
    recommendation: recommendation,
    category: category,
    reasoning: reasoning,
    raw: response
  };
}

>> Create a fallback review for when Claude is unavailable
/exe @createFallbackReview(validation) = js {
  if (validation.valid) {
    return {
      recommendation: "COMMENT",
      category: "utilities", // default fallback
      reasoning: "Automated validation passed, but AI review is unavailable. A human should review this module submission."
    };
  } else {
    return {
      recommendation: "REQUEST_CHANGES", 
      category: "utilities", // default fallback
      reasoning: `Automated validation failed:\n\n${validation.issues.map(i => `- ${i}`).join('\n')}\n\nPlease fix these issues before resubmitting.`
    };
  }
}

