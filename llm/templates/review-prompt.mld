---
description: Template for generating Claude review prompts
mlld-version: ">=1.0.0-rc"
---

# Review Prompt Template

>> Generate the review prompt for Claude
@text reviewPrompt(context) = [[
You are reviewing a module submission to the mlld public registry. The mlld registry is a collection of reusable modules that extend mlld's capabilities.

## Pull Request Information
- PR #{{context.pr.number}}: {{context.pr.title}}
- Author: {{context.pr.author}}
- Files changed: {{context.pr.files.length}}

## Module Being Submitted
```json
{{JSON.stringify(context.module, null, 2)}}
```

## Automated Validation Results
Status: {{context.validation.valid ? "✅ PASSED" : "❌ FAILED"}}
{{context.validation.issues.length > 0 ? "\nIssues found:\n" + context.validation.issues.map(i => "- " + i).join("\n") : ""}}

## Review Criteria

Please evaluate this module submission based on these criteria:

### 1. Real Value (Most Important)
- Does this module provide genuine, practical value to mlld users?
- Is it solving a real problem or just a toy example?
- Would you use this module in your own mlld workflows?

### 2. Security
- Are there any security concerns with the module's functionality?
- Does it access sensitive resources appropriately?
- Are there any potential attack vectors?

### 3. Code Quality
- Is the module well-structured and readable?
- Does it follow mlld best practices (orchestration over programming)?
- Are the exported functions clearly named and documented?

### 4. Immutability
- Is the source properly pinned to a specific version/commit?
- For gists: Is there a commit hash specified?
- For repos: Is there a tag, release, or commit specified?

### 5. Documentation
- Is the module's purpose clearly described?
- Are there usage examples?
- Is the API well-documented?

### 6. Dependencies
- Does the module correctly declare its runtime needs?
- Are the needs accurate based on the code?
- Are version requirements reasonable?
- Are all used packages/commands declared in the detailed dependencies?

### 7. Category Assignment
Based on the module's functionality, assign it to exactly ONE of these categories:
- **prompts**: Templates for LLM prompting and AI interactions
- **utilities**: General-purpose helper functions and tools
- **when**: Predicates and conditions for use with @when directives
- **filters**: Data filtering and selection functions
- **formatters**: Text and data formatting functions
- **commands**: Command-line tool wrappers and executors
- **apis**: API clients and web service integrations
- **clis**: Command-line interface tools and utilities
- **templates**: Document and code templates (non-prompt)
- **integrations**: External service connections and workflows
- **generators**: Content and code generation tools
- **validators**: Data validation and schema checking
- **transformers**: Data format conversion and transformation
- **workflows**: Multi-step automation and orchestration
- **dev**: Development utilities (linting, testing, build helpers)
- **tests**: Testing utilities and assertion helpers
- **context**: Tools for gathering and organizing context for AI

## Your Response

You MUST start your response with exactly one of these words:
- **APPROVE**: The module meets all criteria and should be accepted
- **REQUEST_CHANGES**: There are issues that must be fixed before acceptance
- **COMMENT**: You have non-blocking suggestions or need clarification

Immediately after your decision word, on the next line, provide the category assignment:
**CATEGORY: [category-name]**

Then provide detailed reasoning for your decision. Be specific about any issues or suggestions.

Example format:
```
APPROVE
CATEGORY: apis

This module provides excellent value by... [detailed reasoning]
```
]]

@data module = {
  "reviewPrompt": @reviewPrompt
}