---
description: Automated PR review workflow for mlld registry
mlld-version: ">=1.3.0"
---

# 🤖 Automated Module Review

This workflow reviews module submissions to ensure quality and security.

@import { PR_NUMBER, REPO_OWNER, REPO_NAME } from @INPUT

>> Import local modules using relative paths
@import { validateEnvironment } from "../modules/env-utils.mld"
@import { getPRData, getPRDiff } from "../modules/github-utils.mld"
@import { extractModuleContent, validateModule } from "../modules/registry-utils.mld"
@import { queryClaudeAPI, parseReviewResponse, createFallbackReview } from "../modules/claude-utils.mld"

## 📋 Workflow Configuration

@data config = {
  "requiredEnv": ["ANTHROPIC_API_KEY", "GITHUB_TOKEN"],
  "repo": "@REPO_OWNER/@REPO_NAME",
  "modulePattern": "modules/**/*.json",
  "maxRetries": 3
}

## ✅ Step 1: Validate Environment

@data envCheck = @validateEnvironment(@config.requiredEnv)
@add @envCheck.summary

>> Only proceed if environment is valid
@when @envCheck.valid: [
  true  => @data shouldContinue = true
  false => @data shouldContinue = false
]

## 📥 Step 2: Fetch Pull Request Data

@when @shouldContinue: [
  true => @add [[Fetching PR #{{PR_NUMBER}} from {{config.repo}}...]]
  true => @data prData = @getPRData(@PR_NUMBER, @config.repo)
  true => @data prDiff = @getPRDiff(@PR_NUMBER, @config.repo, @config.modulePattern)
]

## 🔍 Step 3: Extract Module Information

@when @prData: [
  true => @add [[Analyzing module changes...]]
  true => @data moduleContent = @extractModuleContent(@prDiff)
  true => @data validation = @validateModule(@moduleContent)
]

## 📝 Step 4: Prepare Review Context

@when @moduleContent: [
  true => @import { createReviewContext } from "../templates/review-context.mld"
  true => @data reviewContext = @createReviewContext(@prData, @moduleContent, @validation)
]

## 🤖 Step 5: Get AI Review

@when @validation: [
  true => @import { reviewPrompt } from "../templates/review-prompt.mld"
  true => @text prompt = @reviewPrompt(@reviewContext)
]

>> Only query Claude if module passed basic validation
@when @validation.valid: [
  true  => @add [[🤖 Requesting Claude review...]]
  true  => @data aiResponse = @queryClaudeAPI(@prompt, @config.maxRetries)
  true  => @data review = @parseReviewResponse(@aiResponse)
  false => @data review = @createFallbackReview(@validation)
]

## 📤 Step 6: Prepare GitHub Output

@when @review: [
  true => @import { formatGitHubReview } from "../templates/github-review.mld"
  true => @text githubReview = @formatGitHubReview(@review, @reviewContext)
]

>> Export recommendation and category as environment variables
@when @review.recommendation: [
  true => @output @review.recommendation to env:LLM_RECOMMENDATION
  true => @output @review.category to env:LLM_CATEGORY
  true => @output @githubReview to env:LLM_REVIEW_BODY
]

## 📊 Step 7: Summary Report

@when all: [
  @prData
  @validation
  @review
] => @import { createSummaryReport } from "../templates/summary-report.mld"

@when @createSummaryReport: [
  true => @text summary = @createSummaryReport(@prData, @validation, @review)
  true => @output @summary to stdout
]

## 🎯 Workflow Complete

@when @review.recommendation: [
  "APPROVE"         => @output "✅ Module approved for registry" to stdout
  "REQUEST_CHANGES" => @output "❌ Changes requested" to stdout
  "COMMENT"         => @output "💬 Review posted as comment" to stdout
]