---
description: Automated PR review workflow for mlld registry
mlld-version: ">=1.3.0"
---

# 🤖 Automated Module Review

This workflow reviews module submissions to ensure quality and security.

@import { * } from @input

>> Import local modules using relative paths
@import { validateEnvironment } from "../modules/env-utils.mld"
@import { getPRData, getPRDiff } from "../modules/github-utils.mld"
@import { extractModuleContent, validateModule } from "../modules/registry-utils.mld"
@import { queryClaudeAPI, parseReviewResponse, createFallbackReview } from "../modules/claude-utils.mld"
@import { createReviewContext } from "../templates/review-context.mld"
@import { reviewPrompt } from "../templates/review-prompt.mld"
@import { formatGitHubReview } from "../templates/github-review.mld"
@import { createSummaryReport } from "../templates/summary-report.mld"

## 📋 Workflow Configuration

@data config = {
  "requiredEnv": ["ANTHROPIC_API_KEY", "GITHUB_TOKEN"],
  "repo": "@REPO_OWNER/@REPO_NAME",
  "modulePattern": "modules/**/*.json",
  "maxRetries": 3
}

## ✅ Step 1: Validate Environment

@data envCheck = @validateEnvironment(@config.requiredEnv)
@add @envCheck.summary

## 📥 Step 2: Fetch Pull Request Data

@text fetchMessage = [[Fetching PR #{{PR_NUMBER}} from {{config.repo}}...]]
@when @envCheck.valid => @add @fetchMessage

>> Only fetch if environment is valid
@when @envCheck.valid => @run [(echo "Environment validated, proceeding...")]

@data prData = @getPRData(@PR_NUMBER, @config.repo)
@data prDiff = @getPRDiff(@PR_NUMBER, @config.repo, @config.modulePattern)

## 🔍 Step 3: Extract Module Information

@when @prData => @add "Analyzing module changes..."

@data moduleContent = @extractModuleContent(@prDiff)
@data validation = @validateModule(@moduleContent)

## 📝 Step 4: Prepare Review Context

@data reviewContext = @createReviewContext(@prData, @moduleContent, @validation)

## 🤖 Step 5: Get AI Review

@text prompt = @reviewPrompt(@reviewContext)

@when @validation.valid => @add "🤖 Requesting Claude review..."

>> Get AI review based on validation status
@exec getReview(validation, prompt, maxRetries) = @run js [(
  if (validation && validation.valid) {
    // Query Claude API
    const response = queryClaudeAPI(prompt, maxRetries);
    return parseReviewResponse(response);
  } else {
    // Create fallback review
    return createFallbackReview(validation);
  }
)]

@data review = @getReview(@validation, @prompt, @config.maxRetries)

## 📤 Step 6: Prepare GitHub Output

@text githubReview = @formatGitHubReview(@review, @reviewContext)

>> Export recommendation and category for GitHub Actions
@data recommendation = @review.recommendation
@data category = @review.category

>> Set environment variables using run commands
@when @recommendation => @run [(echo "LLM_RECOMMENDATION=@recommendation" >> $GITHUB_ENV)]
@when @category => @run [(echo "LLM_CATEGORY=@category" >> $GITHUB_ENV)]
@when @githubReview => @run [(echo "LLM_REVIEW_BODY<<EOF" >> $GITHUB_ENV && echo "@githubReview" >> $GITHUB_ENV && echo "EOF" >> $GITHUB_ENV)]

## 📊 Step 7: Summary Report

@text summary = @createSummaryReport(@prData, @validation, @review)
@when @summary => @add @summary

## 🎯 Workflow Complete

@when @recommendation: [
  "APPROVE"         => @add "✅ Module approved for registry"
  "REQUEST_CHANGES" => @add "❌ Changes requested"
  "COMMENT"         => @add "💬 Review posted as comment"
]