---
description: Automated PR review workflow for mlld registry
mlld-version: ">=1.3.0"
---

# 🤖 Automated Module Review

This workflow reviews module submissions to ensure quality and security.

/import { PR_NUMBER, REPO_OWNER, REPO_NAME, GITHUB_TOKEN, ANTHROPIC_API_KEY } from @input

>> Import core modules
/import { env } from @mlld/env
/import { github } from @mlld/github

>> Import local modules
/import { extractModuleFromPR, validateModule } from "../modules/registry-utils.mld"
/import { queryClaudeAPI, parseReviewResponse, createFallbackReview } from "../modules/claude-utils.mld"
/import { createReviewContext } from "../templates/review-context.mld"
/import { reviewPrompt } from "../templates/review-prompt.mld"
/import { formatGitHubReview } from "../templates/github-review.mld"
/import { createSummaryReport } from "../templates/summary-report.mld"

## 📋 Workflow Configuration

/var @config = {
  "requiredEnv": ["ANTHROPIC_API_KEY", "GITHUB_TOKEN"],
  "repo": `@REPO_OWNER/@REPO_NAME`,
  "modulePattern": "modules/**/*.json",
  "maxRetries": 3
}

## ✅ Step 1: Validate Environment

/var @envCheck = @env.validate(@config.requiredEnv)
/show @envCheck.summary

## 📥 Step 2: Fetch Pull Request Data

/when @envCheck.valid => /show "Fetching PR data..."

>> Only fetch if environment is valid
/when @envCheck.valid => /var @prData = @github.pr.view(@PR_NUMBER, @config.repo)
/when @envCheck.valid => /var @prDiff = @github.pr.diff(@PR_NUMBER, @config.repo, @config.modulePattern)

## 🔍 Step 3: Extract Module Information

/when @prData => /show "Analyzing module changes..."

>> Extract module from PR files instead of diff parsing
/var @moduleContent = @extractModuleFromPR(@prData.files, @prDiff)
/var @moduleValidation = @validateModule(@moduleContent)

## 📝 Step 4: Prepare Review Context

/var @reviewContext = @createReviewContext(@prData, @moduleContent, @moduleValidation)

## 🤖 Step 5: Get AI Review

/var @prompt = @reviewPrompt(@reviewContext)

/when @moduleValidation.valid => /show "🤖 Requesting Claude review..."

>> Query Claude with retry logic
/var @claudeResponse = @queryClaudeAPI(@prompt, @config.maxRetries)
/var @aiReview = @parseReviewResponse(@claudeResponse)

>> Fallback if AI review fails
/when !@aiReview.recommendation => /var @aiReview = @createFallbackReview(@moduleValidation)

## 📤 Step 6: Prepare GitHub Output

/var @githubReview = @formatGitHubReview(@aiReview, @reviewContext)

>> Export to GitHub Actions environment
/exe @setEnvVar(name, value) = sh {
  echo "$name=$value" >> $GITHUB_ENV
}

/exe @setEnvVarMultiline(name, value) = sh {
  echo "$name<<EOF" >> $GITHUB_ENV
  echo "$value" >> $GITHUB_ENV
  echo "EOF" >> $GITHUB_ENV
}

/when @aiReview.recommendation => /run @setEnvVar("LLM_RECOMMENDATION", @aiReview.recommendation)
/when @aiReview.category => /run @setEnvVar("LLM_CATEGORY", @aiReview.category)
/when @githubReview => /run @setEnvVarMultiline("LLM_REVIEW_BODY", @githubReview)

## 📊 Step 7: Summary Report

/var @summary = @createSummaryReport(@prData, @moduleValidation, @aiReview)
/show @summary

## 🎯 Workflow Complete

/when @aiReview.recommendation: [
  "APPROVE"         => /show "✅ Module approved for registry"
  "REQUEST_CHANGES" => /show "❌ Changes requested"
  "COMMENT"         => /show "💬 Review posted as comment"
]