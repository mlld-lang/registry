---
description: Apply GitHub labels based on LLM review results
mlld-version: ">=1.3.0"
---

# Apply Review Labels

@import { PR_NUMBER, REPO_OWNER, REPO_NAME, LLM_RECOMMENDATION, LLM_CATEGORY } from @input

## Set Default Values

@exec setDefault(value, defaultValue) = @run js [(
  return value || defaultValue;
)]

@text recommendation = @setDefault(@LLM_RECOMMENDATION, "COMMENT")
@text category = @setDefault(@LLM_CATEGORY, "uncategorized")
@exec buildRepo(owner, name) = @run js [(
  return owner + "/" + name;
)]
@text repo = @buildRepo(@REPO_OWNER, @REPO_NAME)

## Create Missing Labels if Needed

@exec createLabel(name, color, description) = @run [(
  gh label create "@name" \
    --repo @repo \
    --color "@color" \
    --description "@description"
)]

>> Ensure labels exist
@run @createLabel("llm-approved", "0e8a16", "Module approved by LLM review")
@run @createLabel("needs-changes", "d93f0b", "Changes requested by LLM review")
@run @createLabel("needs-review", "fbca04", "Needs manual review")

## Apply Recommendation Label

@when @recommendation: [
  "APPROVE" => @run [(gh pr edit @PR_NUMBER --repo @repo --add-label "llm-approved")]
  "REQUEST_CHANGES" => @run [(gh pr edit @PR_NUMBER --repo @repo --add-label "needs-changes")]
  "COMMENT" => @run [(gh pr edit @PR_NUMBER --repo @repo --add-label "needs-review")]
]

## Apply Category Label

@when @category: [
  "uncategorized" => @add "No category label to apply"
  true => @run @createLabel("module-@category", "1d76db", "Module category: @category")
]

@when @category: [
  "uncategorized" => @add ""
  true => @run [(gh pr edit @PR_NUMBER --repo @repo --add-label "module-@category")]
]

## Summary

@text summaryMessage = [[âœ… Labels applied for PR #{{PR_NUMBER}}: {{recommendation}} ({{category}})]]
@add @summaryMessage