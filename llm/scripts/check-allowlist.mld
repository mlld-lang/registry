---
description: Check if PR author is on the trusted allowlist
mlld-version: ">=1.3.0"
---

# Check Trusted Author Status

@import { PR_AUTHOR } from @input
@import { includes } from "../modules/comparison-utils.mld"

## Read Allowlist

>> Read the allowlist file from project root
@path allowlistContent = "../../allowlist.json"

>> Parse the JSON
@exec parseAllowlist(content) = @run js [(
  try {
    const data = JSON.parse(content);
    return {
      authors: data.trustedAuthors || [],
      count: (data.trustedAuthors || []).length,
      valid: true
    };
  } catch (e) {
    return {
      authors: [],
      count: 0,
      valid: false,
      error: e.message
    };
  }
)]

@data allowlist = @parseAllowlist(@allowlistContent)

## Check Trust Status

@text errorMessage = [[⚠️ Failed to parse allowlist: {{allowlist.error}}]]
@data isInvalid = @allowlist.valid == false
@when @isInvalid => @add @errorMessage

>> Check if author is trusted
@exec checkTrust(allowlist, author) = @run js [(
  if (allowlist && allowlist.valid) {
    return includes(allowlist.authors, author);
  }
  return false;
)]

@data isTrusted = @checkTrust(@allowlist, @PR_AUTHOR)

## Report Status

@text trustedMessage = [[✅ {{PR_AUTHOR}} is a trusted author ({{allowlist.count}} total trusted authors)]]
@text notTrustedMessage = [[ℹ️ {{PR_AUTHOR}} is not on allowlist, will proceed with LLM review]]

@when @isTrusted: [
  true  => @add @trustedMessage
  false => @add @notTrustedMessage
]

## Exit Code for GitHub Actions

>> GitHub Actions uses output to determine trusted status
@when @isTrusted: [
  true  => @run [(echo "trusted=true" >> $GITHUB_OUTPUT)]
  false => @run [(echo "trusted=false" >> $GITHUB_OUTPUT)]
]