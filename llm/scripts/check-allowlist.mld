---
description: Check if PR author is on the trusted allowlist
mlld-version: ">=1.3.0"
---

# Check Trusted Author Status

@import { PR_AUTHOR } from @input

## Read Allowlist

>> Read the allowlist file from project root
@text allowlistContent = @run [(cat ./allowlist.json)]

>> Parse the JSON
@exec parseAllowlist(content) = @run js [(
  try {
    const data = JSON.parse(content);
    return {
      authors: data.trustedAuthors || [],
      count: (data.trustedAuthors || []).length,
      valid: true
    };
  } catch (e) {
    return {
      authors: [],
      count: 0,
      valid: false,
      error: e.message
    };
  }
)]

@data allowlistData = @parseAllowlist(@allowlistContent)

## Check Trust Status

@text errorMessage = [[⚠️ Failed to parse allowlist: {{allowlistData.error}}]]
@exec checkError(allowlist) = @run js [(
  return !allowlist || !allowlist.valid;
)]
@data hasError = @checkError(@allowlistData)
@when @hasError => @add "⚠️ Failed to read or parse allowlist file"

>> Check if author is trusted
@exec checkTrust(allowlist, author) = @run js [(
  if (allowlist && allowlist.valid && Array.isArray(allowlist.authors)) {
    return allowlist.authors.includes(author) ? "true" : "";
  }
  return "";
)]

@data isTrusted = @checkTrust(@allowlistData, @PR_AUTHOR)

## Report Status

@exec reportStatus(trusted, author, count) = @run js [(
  if (trusted === "true" || trusted === true) {
    return `✅ ${author} is a trusted author (${count} total trusted authors)`;
  } else {
    return `ℹ️ ${author} is not on allowlist, will proceed with LLM review`;
  }
)]

@text statusMessage = @reportStatus(@isTrusted, @PR_AUTHOR, @allowlistData.count)
@add @statusMessage

## Exit Code for GitHub Actions

>> GitHub Actions uses output to determine trusted status
@exec setGitHubOutput(value) = @run sh [(
  echo "trusted=$value" >> $GITHUB_OUTPUT
)]

@when @isTrusted: [
  true  => @run @setGitHubOutput("true")
  false => @run @setGitHubOutput("false")
]